[buildout]
extends =
    versions.cfg

extensions =
    buildout.dumppickedversions

parts =
    dirs
    download-etlinux
    unpack-etlinux
    bin-etded
    download-etlinux-260b
    install-etlinux-260b
    download-noquarter
    install-noquarter
    download-omnibot
    install-omnibot
    install-the_port_b1
    install-pirates
    install-italyfp2
    install-venice
    install-et_mor2_night_final
    install-eltz_beta1
    set-paths
    symlink-configs
    supervisor


[globals]
shared_directory = ${buildout:directory}/var/shared
build_directory = ${buildout:parts-directory}/_build
et_directory = ${buildout:parts-directory}/enemy-territory

etlinux_url = http://ftp.gwdg.de/pub/misc/ftp.idsoftware.com/idstuff/et/linux/et-linux-${versions:etlinux}.x86.run
etlinux_260b_url = http://et.jlclan.org/ET-2.60b-linux.zip
noquarter_url = http://wolffiles.de/filebase/ET/Mods/nq_v1-2-9_b6.zip
omnibot_url = http://www.omni-bot.com/forum/downloads/Omni-bot_0.8_ET_(Full)_Linux.zip

omnibot_waypoints_base_url = http://svn.assembla.com/svn/omnibot/Enemy-Territory/0.8/et/nav/

the_port_b1_url = http://wolffiles.de/filebase/ET/Maps/the_port_b1.zip
pirates_url = http://wolffiles.de/filebase/ET/Maps/pirates.zip
italyfp2_url = http://wolffiles.de/filebase/ET/Maps/streets-of-italy_fp2.zip
venice_url = http://wolffiles.de/filebase/ET/Maps/venice.zip
et_mor2_night_final_url = http://wolffiles.de/filebase/ET/Maps/marrakech_streets_2_night.zip
eltz_beta1_url = http://wolffiles.de/filebase/ET/Maps/castle-eltz_b1.zip


[dirs]
recipe = plone.recipe.command
command =
    mkdir -p "${globals:et_directory}" && mkdir -p "${globals:shared_directory}" && mkdir -p "${globals:build_directory}" && mkdir -p "${globals:et_directory}/nq/xpsave"
stop-on-error = yes


[download-etlinux]
recipe = hexagonit.recipe.download
url = ${globals:etlinux_url}
destination = ${globals:build_directory}
download-only = True


[unpack-etlinux]
recipe = cp.recipe.cmd
shell = /bin/sh
install_cmd =
    chmod +x "${globals:build_directory}/et-linux-2.60.x86.run"
    "${globals:build_directory}/et-linux-2.60.x86.run" --nox11 --noexec --target "${globals:build_directory}/et-linux-2.60"
    cp "${globals:build_directory}/et-linux-2.60/bin/Linux/x86/etded.x86" "${globals:build_directory}/et-linux-2.60/etded.x86"
    rm -r "${globals:build_directory}/et-linux-2.60/bin"
    rm "${globals:build_directory}/et-linux-2.60/README"
    chmod 644 "${globals:build_directory}/et-linux-2.60/etmain/cgame.mp.i386.so"
    chmod 644 "${globals:build_directory}/et-linux-2.60/etmain/qagame.mp.i386.so"
    chmod 644 "${globals:build_directory}/et-linux-2.60/etmain/ui.mp.i386.so"
    chmod 644 "${globals:build_directory}/et-linux-2.60/openurl.sh"
    rm -r "${globals:build_directory}/et-linux-2.60/setup.data"
    rm "${globals:build_directory}/et-linux-2.60/setup.sh"
    cp -r "${globals:build_directory}/et-linux-2.60/"* "${globals:et_directory}"
    rm -r "${globals:build_directory}/et-linux-2.60"
    rm "${globals:build_directory}/et-linux-2.60.x86.run"
    echo "Installed et-linux-2.60"
update_cmd =
    echo "Updated et-linux-2.60"



# bin/etded : A script for running etded.x86 with the correct
# working directory, LD_LIBRARY_PATH and fs_homepath
[bin-etded]
recipe = collective.recipe.template
input = inline:
    #!/bin/sh
    # Needed to make symlinks/shortcuts work.
    # the binaries must run with correct working directory
    cd "${globals:et_directory}"
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:.
    export HOME="${globals:et_directory}"
    exec ./etded.x86 +set fs_homepath "${globals:et_directory}" +exec set_paths.cfg +exec omnibot.cfg +set com_hunkmegs 64 +exec server.cfg +set fs_game nq +exec ftw.cfg +exec set_paths.cfg "$@"
output = ${buildout:directory}/bin/etded
mode = 755


[download-etlinux-260b]
recipe = hexagonit.recipe.download
url = ${globals:etlinux_260b_url}
destination = ${globals:build_directory}


[install-etlinux-260b]
recipe = cp.recipe.cmd
shell = /bin/sh
install_cmd =
    cp "${globals:build_directory}/ET-2.60b-linux/etded.x86" "${globals:et_directory}/etded.x86"
    rm -r "${globals:build_directory}/ET-2.60b-linux/"
    echo "Installed patch to 2.60b"
update_cmd =
    echo "Updated patch to 2.60b"



[download-noquarter]
recipe = hexagonit.recipe.download
url = ${globals:noquarter_url}
destination = ${globals:build_directory}/nq_dist


[install-noquarter]
recipe = cp.recipe.cmd
shell = /bin/sh
install_cmd =
    mkdir -p "${globals:et_directory}/nq"
    cp "${globals:build_directory}/nq_dist/nq_v1.2.9_3.pk3" "${globals:et_directory}/nq/"
    cp "${globals:build_directory}/nq_dist/nq_b_v1.2.9_6.pk3" "${globals:et_directory}/nq/"
    cp "${globals:build_directory}/nq_dist/qagame.mp.i386.so" "${globals:et_directory}/nq/"
    rm -r "${globals:build_directory}/nq_dist/"
    echo "Installed NoQuarter mod"
update_cmd =
    echo "Updated NoQuarter mod"


[download-omnibot]
recipe = hexagonit.recipe.download
url = ${globals:omnibot_url}
destination = ${globals:build_directory}/omnibot_dist


[install-omnibot]
recipe = cp.recipe.cmd
shell = /bin/sh
install_cmd =
    cp -r "${globals:build_directory}/omnibot_dist/omnibot" "${globals:et_directory}/"
    cp -r "${globals:build_directory}/omnibot_dist/omni-bot" "${globals:et_directory}/"
    rm -r "${globals:build_directory}/omnibot_dist/"
    echo "Installed Omnibot mod"
update_cmd =
    echo "Updated Omnibot mod"


[install-the_port_b1]
recipe = cp.recipe.cmd
shell = /bin/sh
map_name = the_port_b1
map_url = ${globals:the_port_b1_url}
install_cmd =
    mkdir -p "${globals:build_directory}/${:map_name}"
    cd "${globals:build_directory}/${:map_name}"
    wget -q -O ${:map_name}.zip "${:map_url}"
    unzip -q -o ${:map_name}.zip
    cp *.pk3 "${globals:et_directory}/etmain/"
    wget -q -O "${globals:et_directory}/omni-bot/et/nav/${:map_name}.gm" "${globals:omnibot_waypoints_base_url}/${:map_name}.gm"
    wget -q -O "${globals:et_directory}/omni-bot/et/nav/${:map_name}_goals.gm" "${globals:omnibot_waypoints_base_url}/${:map_name}_goals.gm"
    wget -q -O "${globals:et_directory}/omni-bot/et/nav/${:map_name}.way" "${globals:omnibot_waypoints_base_url}/${:map_name}.way"
    cd ..
    rm -r "${globals:build_directory}/${:map_name}"
    echo "Installed map ${:map_name}"
update_cmd =
    echo "Updated map ${:map_name}"

[install-pirates]
recipe = cp.recipe.cmd
shell = /bin/sh
map_name = pirates
map_url = ${globals:pirates_url}
install_cmd =
    mkdir -p "${globals:build_directory}/${:map_name}"
    cd "${globals:build_directory}/${:map_name}"
    wget -q -O ${:map_name}.zip "${:map_url}"
    unzip -q -o ${:map_name}.zip
    cp *.pk3 "${globals:et_directory}/etmain/"
    wget -q -O "${globals:et_directory}/omni-bot/et/nav/${:map_name}.gm" "${globals:omnibot_waypoints_base_url}/${:map_name}.gm"
    wget -q -O "${globals:et_directory}/omni-bot/et/nav/${:map_name}_goals.gm" "${globals:omnibot_waypoints_base_url}/${:map_name}_goals.gm"
    wget -q -O "${globals:et_directory}/omni-bot/et/nav/${:map_name}.way" "${globals:omnibot_waypoints_base_url}/${:map_name}.way"
    cd ..
    #rm -r "${globals:build_directory}/${:map_name}"
    echo "Installed map ${:map_name}"
update_cmd =
    echo "Updated map ${:map_name}"


[install-italyfp2]
recipe = cp.recipe.cmd
shell = /bin/sh
map_name = italyfp2
map_url = ${globals:italyfp2_url}
install_cmd =
    mkdir -p "${globals:build_directory}/${:map_name}"
    cd "${globals:build_directory}/${:map_name}"
    wget -q -O ${:map_name}.zip "${:map_url}"
    unzip -q -o ${:map_name}.zip
    cp italyfp2.pk3 "${globals:et_directory}/etmain/"
    cp italyfp2_mods.pk3 "${globals:et_directory}/nq/"
    wget -q -O "${globals:et_directory}/omni-bot/et/nav/${:map_name}.gm" "${globals:omnibot_waypoints_base_url}/${:map_name}.gm"
    wget -q -O "${globals:et_directory}/omni-bot/et/nav/${:map_name}_goals.gm" "${globals:omnibot_waypoints_base_url}/${:map_name}_goals.gm"
    wget -q -O "${globals:et_directory}/omni-bot/et/nav/${:map_name}.way" "${globals:omnibot_waypoints_base_url}/${:map_name}.way"
    cd ..
    #rm -r "${globals:build_directory}/${:map_name}"
    echo "Installed map ${:map_name}"
update_cmd =
    echo "Updated map ${:map_name}"


[install-venice]
recipe = cp.recipe.cmd
shell = /bin/sh
map_name = venice
map_url = ${globals:venice_url}
install_cmd =
    mkdir -p "${globals:build_directory}/${:map_name}"
    cd "${globals:build_directory}/${:map_name}"
    wget -q -O ${:map_name}.zip "${:map_url}"
    unzip -q -o ${:map_name}.zip
    cp *.pk3 "${globals:et_directory}/etmain/"
    cd ..
    #rm -r "${globals:build_directory}/${:map_name}"
    echo "Installed map ${:map_name}"
update_cmd =
    echo "Updated map ${:map_name}"


[install-et_mor2_night_final]
recipe = cp.recipe.cmd
shell = /bin/sh
map_name = et_mor2_night_final
map_url = ${globals:et_mor2_night_final_url}
install_cmd =
    mkdir -p "${globals:build_directory}/${:map_name}"
    cd "${globals:build_directory}/${:map_name}"
    wget -q -O ${:map_name}.zip "${:map_url}"
    unzip -q -o ${:map_name}.zip
    cp *.pk3 "${globals:et_directory}/etmain/"
    cd ..
    #rm -r "${globals:build_directory}/${:map_name}"
    echo "Installed map ${:map_name}"
update_cmd =
    echo "Updated map ${:map_name}"


[install-eltz_beta1]
recipe = cp.recipe.cmd
shell = /bin/sh
map_name = eltz_beta1
map_url = ${globals:eltz_beta1_url}
install_cmd =
    mkdir -p "${globals:build_directory}/${:map_name}"
    cd "${globals:build_directory}/${:map_name}"
    wget -q -O ${:map_name}.zip "${:map_url}"
    unzip -q -o ${:map_name}.zip
    cp *.pk3 "${globals:et_directory}/etmain/"
    wget -q -O "${globals:et_directory}/omni-bot/et/nav/${:map_name}.gm" "${globals:omnibot_waypoints_base_url}/${:map_name}.gm"
    wget -q -O "${globals:et_directory}/omni-bot/et/nav/${:map_name}_goals.gm" "${globals:omnibot_waypoints_base_url}/${:map_name}_goals.gm"
    wget -q -O "${globals:et_directory}/omni-bot/et/nav/${:map_name}.way" "${globals:omnibot_waypoints_base_url}/${:map_name}.way"
    cd ..
    #rm -r "${globals:build_directory}/${:map_name}"
    echo "Installed map ${:map_name}"
update_cmd =
    echo "Updated map ${:map_name}"


# etmain/set-paths.cfg: A script for setting absolute paths needed for
# XPSave and various mods.
[set-paths]
recipe = collective.recipe.template
input = inline:
    // For some reason, g_XPSaveDirectory seems to be a command, i.e.
    // 'set g_XPSaveDirectory ...' won't work. Also it needs to be
    // executed after the map cycle to take effect. That's why
    // set_paths.cfg is executed once before all other configs,
    // and once after (see bin/etded).
    g_XPSaveDirectory "${globals:et_directory}/nq/xpsave"
    set omnibot_path "${globals:et_directory}/omni-bot"
output = ${globals:et_directory}/etmain/set_paths.cfg
mode = 755



[symlink-configs]
recipe = cp.recipe.cmd
shell = /bin/sh
install_cmd =
    rm "${globals:et_directory}/etmain/server.cfg"
    ln -s "../../../cfgs/server.cfg" "${globals:et_directory}/etmain/"
    rm -f "${globals:et_directory}/etmain/campaign_rotation.cfg"
    ln -s "../../../cfgs/campaign_rotation.cfg" "${globals:et_directory}/etmain/"
    rm -f "${globals:et_directory}/etmain/ftw.cfg"
    ln -s "../../../cfgs/ftw.cfg" "${globals:et_directory}/etmain/"
    rm -f "${globals:et_directory}/etmain/mapvotecycle.cfg"
    ln -s "../../../cfgs/mapvotecycle.cfg" "${globals:et_directory}/etmain/"
    rm -f "${globals:et_directory}/etmain/noquarter.cfg"
    ln -s "../../../cfgs/noquarter.cfg" "${globals:et_directory}/etmain/"
    rm -f "${globals:et_directory}/etmain/omnibot.cfg"
    ln -s "../../../cfgs/omnibot.cfg" "${globals:et_directory}/etmain/"
    rm -f "${globals:et_directory}/nq/shrubbot.cfg"
    ln -s "../../../cfgs/shrubbot.cfg" "${globals:et_directory}/nq/"
    rm -f "${globals:et_directory}/etmain/cmpgn_custom_1.pk3"
    ln -s "../../../pk3s/cmpgn_custom_1.pk3" "${globals:et_directory}/etmain/"
    rm -f "${globals:et_directory}/omni-bot/et/user/omni-bot.cfg"
    ln -s "../../../../../cfgs/omni-bot/et/user/omni-bot.cfg" "${globals:et_directory}/omni-bot/et/user/"
    rm -f "${globals:et_directory}/omni-bot/et/scripts/goals/goal_difficulty.gm"
    ln -s "../../../../../../cfgs/omni-bot/et/scripts/goals/goal_difficulty.gm" "${globals:et_directory}/omni-bot/et/scripts/goals/"

    # Server specific configs not to be checked in (.gitignored)
    rm -f "${globals:et_directory}/etmain/ip_settings.cfg"
    ln -s "../../../cfgs/ip_settings.cfg" "${globals:et_directory}/etmain/"
    rm -f "${globals:et_directory}/etmain/pwd.cfg"
    ln -s "../../../cfgs/pwd.cfg" "${globals:et_directory}/etmain/"
    rm -f "${globals:et_directory}/etmain/server_custom.cfg"
    ln -s "../../../cfgs/server_custom.cfg" "${globals:et_directory}/etmain/"

    echo "Installed ET config symlinks"
update_cmd =
    echo "Updated ET config symlinks"



[supervisor]
recipe = collective.recipe.supervisor
plugins =
    superlance
port = 27955
user = supervisor
password = admin

programs =
    10 controller (stopsignal=INT) ${buildout:bin-directory}/etded
